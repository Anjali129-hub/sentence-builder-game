{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anjal\\\\OneDrive\\\\Desktop\\\\sentence-builder-game\\\\src\\\\components\\\\QuestionCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionCard({\n  question,\n  onAnswer\n}) {\n  _s();\n  const [selectedWords, setSelectedWords] = useState([]);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const toggleWord = word => {\n    // Unselect if already selected\n    if (selectedWords.includes(word)) {\n      setSelectedWords(prev => prev.filter(w => w !== word));\n    } else {\n      // Only add if not already selected and blanks not full\n      if (selectedWords.length < question.correctAnswer.length) {\n        setSelectedWords(prev => [...prev, word]);\n      }\n    }\n  };\n  const checkAnswer = () => {\n    const isCorrect = JSON.stringify(selectedWords) === JSON.stringify(question.correctAnswer);\n    onAnswer(isCorrect);\n    setIsSubmitted(true);\n    setTimeout(() => {\n      setSelectedWords([]);\n      setIsSubmitted(false);\n    }, 500);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg font-medium text-gray-700 leading-relaxed\",\n      children:\n      // Split sentence and insert selected words in blanks with spacing\n      question.question.split(' ').map((word, index) => {\n        if (word === '_____________') {\n          const fillIndex = selectedWords.length > 0 ? selectedWords.findIndex((_, i) => i === index - selectedWords.length) : -1;\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"inline-block mx-1 px-3 py-1 bg-yellow-100 border-b-2 border-yellow-400 min-w-[70px]\",\n            children: selectedWords[fillIndex] || '_____'\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"inline-block mx-1\",\n            children: word\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 22\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap justify-center gap-2\",\n      children: question.options.map((word, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleWord(word),\n        className: `px-4 py-2 rounded-full border transition duration-200 ${selectedWords.includes(word) ? 'bg-green-600 text-white' : 'bg-gray-100 hover:bg-gray-200'}`,\n        children: word\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mt-4 bg-blue-600 text-white px-5 py-2 rounded-full disabled:opacity-50\",\n      onClick: checkAnswer,\n      disabled: selectedWords.length !== question.correctAnswer.length || isSubmitted,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionCard, \"NOHn/aEeV8ZiLTXfW5zas36SoCY=\");\n_c = QuestionCard;\nexport default QuestionCard;\nvar _c;\n$RefreshReg$(_c, \"QuestionCard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","QuestionCard","question","onAnswer","_s","selectedWords","setSelectedWords","isSubmitted","setIsSubmitted","toggleWord","word","includes","prev","filter","w","length","correctAnswer","checkAnswer","isCorrect","JSON","stringify","setTimeout","className","children","split","map","index","fillIndex","findIndex","_","i","fileName","_jsxFileName","lineNumber","columnNumber","options","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/anjal/OneDrive/Desktop/sentence-builder-game/src/components/QuestionCard.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction QuestionCard({ question, onAnswer }) {\r\n  const [selectedWords, setSelectedWords] = useState([]);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n  const toggleWord = (word) => {\r\n    // Unselect if already selected\r\n    if (selectedWords.includes(word)) {\r\n      setSelectedWords(prev => prev.filter(w => w !== word));\r\n    } else {\r\n      // Only add if not already selected and blanks not full\r\n      if (selectedWords.length < question.correctAnswer.length) {\r\n        setSelectedWords(prev => [...prev, word]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkAnswer = () => {\r\n    const isCorrect = JSON.stringify(selectedWords) === JSON.stringify(question.correctAnswer);\r\n    onAnswer(isCorrect);\r\n    setIsSubmitted(true);\r\n    setTimeout(() => {\r\n      setSelectedWords([]);\r\n      setIsSubmitted(false);\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6 text-center\">\r\n      <p className=\"text-lg font-medium text-gray-700 leading-relaxed\">\r\n        {\r\n          // Split sentence and insert selected words in blanks with spacing\r\n          question.question.split(' ').map((word, index) => {\r\n            if (word === '_____________') {\r\n              const fillIndex = selectedWords.length > 0 ? selectedWords.findIndex((_, i) => i === index - selectedWords.length) : -1;\r\n              return (\r\n                <span key={index} className=\"inline-block mx-1 px-3 py-1 bg-yellow-100 border-b-2 border-yellow-400 min-w-[70px]\">\r\n                  {selectedWords[fillIndex] || '_____'}\r\n                </span>\r\n              );\r\n            } else {\r\n              return <span key={index} className=\"inline-block mx-1\">{word}</span>;\r\n            }\r\n          })\r\n        }\r\n      </p>\r\n\r\n      {/* Word Options */}\r\n      <div className=\"flex flex-wrap justify-center gap-2\">\r\n        {question.options.map((word, i) => (\r\n          <button\r\n            key={i}\r\n            onClick={() => toggleWord(word)}\r\n            className={`px-4 py-2 rounded-full border transition duration-200 ${\r\n              selectedWords.includes(word)\r\n                ? 'bg-green-600 text-white'\r\n                : 'bg-gray-100 hover:bg-gray-200'\r\n            }`}\r\n          >\r\n            {word}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <button\r\n        className=\"mt-4 bg-blue-600 text-white px-5 py-2 rounded-full disabled:opacity-50\"\r\n        onClick={checkAnswer}\r\n        disabled={selectedWords.length !== question.correctAnswer.length || isSubmitted}\r\n      >\r\n        Submit Answer\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionCard;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}