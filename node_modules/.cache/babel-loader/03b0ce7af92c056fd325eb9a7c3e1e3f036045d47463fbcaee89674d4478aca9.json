{"ast":null,"code":"import axios from 'axios';\n\n// Fetch questions from the server\nexport const fetchQuestions = async () => {\n  try {\n    // Make an API request to fetch the questions\n    const response = await axios.get(\"http://localhost:3001/data\");\n\n    // Log the entire response to verify the structure (for debugging)\n    console.log(\"API Response:\", response);\n\n    // Check if the response structure is valid\n    if (response.data && response.data.data && response.data.data.questions) {\n      // Return the list of questions from the response data\n      return response.data.data.questions;\n    } else {\n      console.error(\"Invalid response structure:\", response);\n      return []; // Return an empty array if the structure is unexpected\n    }\n  } catch (error) {\n    console.error(\"Error fetching questions:\", error);\n    return []; // Return an empty array in case of an error\n  }\n};","map":{"version":3,"names":["axios","fetchQuestions","response","get","console","log","data","questions","error"],"sources":["C:/Users/anjal/OneDrive/Desktop/sentence-builder-game/src/components/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Fetch questions from the server\r\nexport const fetchQuestions = async () => {\r\n  try {\r\n    // Make an API request to fetch the questions\r\n    const response = await axios.get(\"http://localhost:3001/data\");\r\n\r\n    // Log the entire response to verify the structure (for debugging)\r\n    console.log(\"API Response:\", response);\r\n\r\n    // Check if the response structure is valid\r\n    if (response.data && response.data.data && response.data.data.questions) {\r\n      // Return the list of questions from the response data\r\n      return response.data.data.questions;\r\n    } else {\r\n      console.error(\"Invalid response structure:\", response);\r\n      return []; // Return an empty array if the structure is unexpected\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching questions:\", error);\r\n    return []; // Return an empty array in case of an error\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,4BAA4B,CAAC;;IAE9D;IACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,QAAQ,CAAC;;IAEtC;IACA,IAAIA,QAAQ,CAACI,IAAI,IAAIJ,QAAQ,CAACI,IAAI,CAACA,IAAI,IAAIJ,QAAQ,CAACI,IAAI,CAACA,IAAI,CAACC,SAAS,EAAE;MACvE;MACA,OAAOL,QAAQ,CAACI,IAAI,CAACA,IAAI,CAACC,SAAS;IACrC,CAAC,MAAM;MACLH,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEN,QAAQ,CAAC;MACtD,OAAO,EAAE,CAAC,CAAC;IACb;EACF,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}