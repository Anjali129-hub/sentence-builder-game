{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anjal\\\\OneDrive\\\\Desktop\\\\sentence-builder-game\\\\src\\\\components\\\\QuestionCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction QuestionCard({\n  question,\n  onAnswer\n}) {\n  _s();\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [filledBlanks, setFilledBlanks] = useState([null, null, null, null]); // Store selected answers in blanks\n\n  const handleSelectAnswer = (word, index) => {\n    let updatedAnswers = [...selectedAnswers];\n    let updatedBlanks = [...filledBlanks];\n    if (updatedAnswers.includes(word)) {\n      // Deselect the word if it was already selected\n      updatedAnswers = updatedAnswers.filter(item => item !== word);\n      updatedBlanks[index] = null; // Clear the blank at the respective index\n    } else {\n      // Select the word and fill in the blank\n      updatedAnswers.push(word);\n      updatedBlanks[index] = word;\n    }\n    setSelectedAnswers(updatedAnswers);\n    setFilledBlanks(updatedBlanks);\n  };\n  const handleSubmit = () => {\n    const isCorrect = filledBlanks.every((word, idx) => word === question.correctAnswer[idx]);\n    onAnswer(isCorrect); // Notify parent if the answer is correct\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg font-medium mb-4\",\n      children: question.question.split('___________').map((part, idx) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [part, idx < filledBlanks.length && filledBlanks[idx] && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-semibold text-blue-500\",\n          children: filledBlanks[idx]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this), idx < filledBlanks.length && !filledBlanks[idx] && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-400\",\n          children: \"___________\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap gap-2 mb-4\",\n      children: question.options.map((word, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-4 py-2 rounded-md border ${selectedAnswers.includes(word) ? 'bg-green-300' : 'bg-gray-200'}`,\n        onClick: () => handleSelectAnswer(word, idx),\n        children: word\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mt-4 px-6 py-2 bg-blue-500 text-white rounded-full\",\n      onClick: handleSubmit,\n      disabled: selectedAnswers.length === 0,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionCard, \"0tZgKvvfhc0MGjMVl6f6KmMTTDs=\");\n_c = QuestionCard;\nexport default QuestionCard;\nvar _c;\n$RefreshReg$(_c, \"QuestionCard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","QuestionCard","question","onAnswer","_s","selectedAnswers","setSelectedAnswers","filledBlanks","setFilledBlanks","handleSelectAnswer","word","index","updatedAnswers","updatedBlanks","includes","filter","item","push","handleSubmit","isCorrect","every","idx","correctAnswer","className","children","split","map","part","length","fileName","_jsxFileName","lineNumber","columnNumber","options","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/anjal/OneDrive/Desktop/sentence-builder-game/src/components/QuestionCard.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction QuestionCard({ question, onAnswer }) {\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n  const [filledBlanks, setFilledBlanks] = useState([null, null, null, null]); // Store selected answers in blanks\r\n\r\n  const handleSelectAnswer = (word, index) => {\r\n    let updatedAnswers = [...selectedAnswers];\r\n    let updatedBlanks = [...filledBlanks];\r\n\r\n    if (updatedAnswers.includes(word)) {\r\n      // Deselect the word if it was already selected\r\n      updatedAnswers = updatedAnswers.filter((item) => item !== word);\r\n      updatedBlanks[index] = null; // Clear the blank at the respective index\r\n    } else {\r\n      // Select the word and fill in the blank\r\n      updatedAnswers.push(word);\r\n      updatedBlanks[index] = word;\r\n    }\r\n\r\n    setSelectedAnswers(updatedAnswers);\r\n    setFilledBlanks(updatedBlanks);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const isCorrect = filledBlanks.every((word, idx) => word === question.correctAnswer[idx]);\r\n    onAnswer(isCorrect); // Notify parent if the answer is correct\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-6\">\r\n      <p className=\"text-lg font-medium mb-4\">\r\n        {question.question.split('___________').map((part, idx) => (\r\n          <>\r\n            {part}\r\n            {idx < filledBlanks.length && filledBlanks[idx] && (\r\n              <span className=\"font-semibold text-blue-500\">{filledBlanks[idx]}</span>\r\n            )}\r\n            {idx < filledBlanks.length && !filledBlanks[idx] && (\r\n              <span className=\"text-gray-400\">___________</span>\r\n            )}\r\n          </>\r\n        ))}\r\n      </p>\r\n\r\n      <div className=\"flex flex-wrap gap-2 mb-4\">\r\n        {question.options.map((word, idx) => (\r\n          <button\r\n            key={idx}\r\n            className={`px-4 py-2 rounded-md border ${selectedAnswers.includes(word) ? 'bg-green-300' : 'bg-gray-200'}`}\r\n            onClick={() => handleSelectAnswer(word, idx)}\r\n          >\r\n            {word}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <button\r\n        className=\"mt-4 px-6 py-2 bg-blue-500 text-white rounded-full\"\r\n        onClick={handleSubmit}\r\n        disabled={selectedAnswers.length === 0}\r\n      >\r\n        Submit Answer\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionCard;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}